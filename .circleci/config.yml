version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-stack-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name frontend-stack-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: bccde535-099e-43c3-91d8-42e8b76b7f3e" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            echo $SUCCESS
            if[["$SUCCESS"=="Success"]]
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
          - frontend-build
      - run:
          name: Build frontend
          command: |
            cd ~/project/frontend
            npm install
            npm run build
      - save_cache:
          paths:
          - frontend/node_modules
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
          - backend-build
      - run:
          name: Build backend
          command: |
            cd ~/project/backend
            npm install
            npm run build
      - save_cache:
          paths:
          - backend/node_modules
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
          - frontend-build
      - run:
          name: Frontend test
          command: |
            cd ~/project/frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
          - backend-build
      - run:
          name: Backend test
          command: |
            cd ~/project/backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
          - frontend-build
      - run:
          name: Frontend scan for vulnerabilities
          command: |
            cd ~/project/frontend
            npm install
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
          - backend-build
      - run:
          name: Backend scan for vulnerabilities
          command: |
            cd ~/project/backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "backend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "frontend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udacity-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "$BACKEND_IP" >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.9-alpine3
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
          - "9a:ea:15:ab:01:da:78:98:f9:7b:bd:05:4f:ea:75:e3"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd ~/project/.circleci/ansible
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd ~/project/backend
            npm install
            npm run migrations > migration_output
      - run:
          name: Send migration results to memstash
          command: |
            cd ~/project/backend
            if grep -q "has been executed successfully" migration_output
            then
              echo "Success"
              curl -H "Content-Type: text/plain" -H "token: bccde535-099e-43c3-91d8-42e8b76b7f3e" --request PUT --data "Success" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              echo "Failure"
              curl -H "Content-Type: text/plain" -H "token: bccde535-099e-43c3-91d8-42e8b76b7f3e" --request PUT --data "Failure" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y gcc-c++ make
            yum install sudo -y
            curl -sL https://rpm.nodesource.com/setup_13.x | sudo -E bash -
            yum install -y nodejs
            cd ~/project/frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udacity-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd ~/project/frontend
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            cd ~/project/frontend
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.9-alpine3
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
          - "9a:ea:15:ab:01:da:78:98:f9:7b:bd:05:4f:ea:75:e3"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm rsync openssh
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.9-alpine3
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url and Backend smoke test
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udacity-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "${BACKEND_IP}"
            curl "http://${BACKEND_IP}:3030/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.us-east-2.amazonaws.com/index.html"
            curl -s ${URL} | grep "Welcome"
            #if curl -s ${URL} | grep "Welcome"
            #then
            #  return 1
            #else
            #  return 0
            #fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y curl tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            cd ~/project/.circleci/files
            OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token: bccde535-099e-43c3-91d8-42e8b76b7f3e" --request PUT --data "$OldWorkflowID" https://api.memstash.io/values/WorkflowID
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name cloudfront-stack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment
      - revert-migrations

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Remove old stacks and files
            command: |
              export OldWorkflowID=$(curl -H "token: bccde535-099e-43c3-91d8-42e8b76b7f3e" --request GET https://api.memstash.io/values/WorkflowID)
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
              echo "STACKS: ${STACKS}"
              echo "OldWorkflowID: ${OldWorkflowID}"
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws cloudformation delete-stack --stack-name backend-stack-${OldWorkflowID}
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name frontend-stack-${OldWorkflowID}
              fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
          - build-frontend
      - test-backend:
          requires:
          - build-backend
      - scan-backend:
          requires:
          - build-backend
      - scan-frontend:
          requires:
          - build-frontend
      - deploy-infrastructure:
          requires:
          - test-frontend
          - test-backend
          - scan-frontend
          - scan-backend
          filters:
            branches:
              only:
              - master
      - configure-infrastructure:
          requires:
          - deploy-infrastructure
      - run-migrations:
          requires:
          - configure-infrastructure
      - deploy-frontend:
          requires:
          - run-migrations
      - deploy-backend:
          requires:
          - run-migrations
      - smoke-test:
          requires:
          - deploy-backend
          - deploy-frontend]
      - cloudfront-update:
          requires:
          - smoke-test
      - cleanup:
          requires:
          - cloudfront-update
