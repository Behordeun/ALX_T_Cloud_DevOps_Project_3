version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  install_awscli:
    description: install AWS CLI V2
    steps:
      - run:
          name: install AWS CLI V2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install-nodejs:
    description: install-node.js.13
    steps:
      - run:
          name: install-node.js.13
          command: |
            curl fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
              cd ~/project/backend
              npm install
              npm run migrations:revert
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: test frontend
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: testbackend
          command: |
              cd backend
              npm install
              npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: scanfrontend
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: scanbackend
          command: |
              cd backend
              npm install
              npm audit fix
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Deploy backend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file ./backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      # - run:
      #     name: Save backend URL in memstash
      #     command: |
      #       BACKEND_IP=$(aws ec2 describe-instances \
      #         --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #         --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --output text)
      #       curl -H "Content-Type: text/plain" -H "token: 1e288415-cfc8-4a0a-a23c-087eb7cd7678" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/BACKEND_URL
      - run:
          name: Deploy frontend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file ./frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add backend ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory
            cat inventory
      - destroy-environment
      - revert-migrations
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [9a:ea:15:ab:01:da:78:98:f9:7b:bd:05:4f:ea:75:e3]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Create dotenv file
          command: |
            cd backend/
            echo > ".env"
            echo ENVIRONMENT="production" >> ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
      - run:
          name: Configure server
          command: |
            cat ".circleci/ansible/inventory.txt"
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install awscli
          command: |
            sudo apt-get update
            sudo apt-get -y install awscli
      - run:
          name: Run migrations
          command: |
            cd backend/
            echo > ".env"
            echo ENVIRONMENT="production" >> ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm i
            npm run migrations >> result.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend/
            cat result.txt
            RESULT=$(grep -Fc "has been executed successfully" result.txt)
            curl -H "Content-Type: text/plain" -H "token: migration-${CIRCLE_WORKFLOW_ID}" --request PUT --data ${RESULT} https://api.memstash.io/values/migration_result
      - revert-migrations
      - destroy-environment


  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y gcc-c++ make
            curl -fsSL https://rpm.nodesource.com/setup_lts.x | bash -
            yum install -y nodejs
            node -v
            npm -v
      - run:
          name: Get backend url
          command: |
            cd frontend/
            BACKENDIP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo API_URL="http://${BACKENDIP}:3030" > ".env"
            cat .env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build
            aws s3 sync ./dist s3://"udapeople-${CIRCLE_WORKFLOW_ID}"
      - revert-migrations
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [9a:ea:15:ab:01:da:78:98:f9:7b:bd:05:4f:ea:75:e3]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update npm
            apk add --update curl
            pip3 --no-cache-dir install awscli
      - run:
          name: Build Backend
          command: |
            cd backend
            npm i
            npm run build
      - run:
          name: "tar archiv"
          command: |
            tar -cf backend.tar ./backend
      - run:
          name: Deploy backend
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - revert-migrations
      - destroy-environment


  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install curl
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(tail -1 ~/project/.circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${API_URL}"
            sleep 30
            curl ${API_URL}
      - run:
          name: Frontend smoke test.
          command: |
            export FRONTEND_IP="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            if curl -s ${FRONTEND_IP} | grep "Welcome"
            then
              echo "pass"
              exit 0
            else
              echo "fail"
              exit 1
            fi
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install-nodejs
      - run:
          name: Save old workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name=='WorkflowID'].Value" \
                      --no-paginate --output text)
            echo "old Workflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/7wRafaoScKLygxUg7EeoYC/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitialStack \
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install-nodejs
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID=$(curl --insecure https://kvdb.io/7wRafaoScKLygxUg7EeoYC/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - cloudfront-update:
           requires: [deploy-backend]
      - smoke-test:
          requires: [cloudfront-update]
      - cleanup:
          requires: [cloudfront-update]
